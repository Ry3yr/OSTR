
PHP Backup: https://ry3yr.github.io/php.zip
Run php server locally (android): https://apkcombo.com/de/palapa-web-server/com.alfanla.android.pws/download/apk#urusai.social/@alcea/111761622206017944#i.ibb.co/cx175BB/Screenshot-20240115-165447-Opera.png
Install ComposerPackagesManually(Windows) https://m.youtube.com/watch?v=j8kpwzE6ju0
https://web.archive.org/web/20231220065126/https://alcea-wisteria.de/Puppeteer.rar
___________________________________________________________________________________________________________________
_____https://stackoverflow.com/questions/40545795/how-do-i-install-composer-php-packages-without-composer------
*php-install



Fetch shoutcast trackinfo via querystring:
----------------------------------

<?php
function getStreamMetadata() {
    if (isset($_GET['streamurl'])) {
        $streamUrl = $_GET['streamurl'];
        $needle = 'StreamTitle=';
        $ua = 'Dailymate Radio/1.0';
        $opts = ['http' => ['method' => 'GET',
        'header' => 'Icy-MetaData: 1',
        'user_agent' => $ua]
                ];
        $context = stream_context_create($opts);
        $icyMetaIntFound = false;
        $icyInterval = -1;
        $offset = 0;
        if(($headers = get_headers($streamUrl, 0, $context))) {
            foreach($headers as $h) {
                if(!(strpos(strtolower($h), 'icy-metaint:') === false)) {
                    $icyMetaIntFound = true;
                    $icyInterval = explode(':', $h)[1];
                    break;
                }
            }
        }
        if(!$icyMetaIntFound) {
            echo "icy-metaint header not exists!";
            return;
        }
        if($stream = fopen($streamUrl, 'r', false, $context)) {
            while($buffer = stream_get_contents($stream, $icyInterval, $offset)) {
                if(strpos($buffer, $needle) !== false) {
                    fclose($stream);
                    $title = explode($needle, $buffer)[1];
                    return substr($title, 1, strpos($title, ';') - 2);
                }
                $offset += $icyInterval;
            }
        }
    } else {
        // The 'streamurl' parameter is not set
    }
}
echo getStreamMetadata();
?>

_______________________

Wikipedia tabel parser (with column data copoy function):
-------------------------------------------------

<a target="_blank" href="?tablecolumn=Firm&tablecontent=Nintendo" style=color:blue>txmpl</a><br><br>
<?php
header('Content-Type: text/html; charset=utf-8');
$url = 'https://en.m.wikipedia.org/wiki/List_of_best-selling_game_consoles';
$html = file_get_contents($url);
$table_regex = '/<table[^>]*class="wikitable sortable"[^>]*>(.*?)<\/table>/s';
if (preg_match($table_regex, $html, $matches)) {
    $table_html = $matches[0];
    $column = $_GET['tablecolumn'] ?? '';
    $content = $_GET['tablecontent'] ?? '';
    if (!empty($column) && !empty($content)) {
        $filtered_table_html = filterTable($table_html, $column, $content);
        if ($filtered_table_html) {
            echo $filtered_table_html;
        } else {
            echo 'No matching rows found.';
        }
    } else {
        echo $table_html;
    }
    addCopyButtons();
} else {
    echo 'Table not found.';
}
function filterTable($tableHtml, $column, $content)
{
    $dom = new DOMDocument();
    libxml_use_internal_errors(true);
    $dom->loadHTML(mb_convert_encoding($tableHtml, 'HTML-ENTITIES', 'UTF-8'));
    libxml_clear_errors();
    $xpath = new DOMXPath($dom);
    $rows = $xpath->query('//table/tbody/tr');
    $columnIndex = -1;
    $headerRow = $rows->item(0);
    $headerCells = $headerRow->getElementsByTagName('th');
    foreach ($headerCells as $index => $cell) {
        if (trim($cell->nodeValue) === $column) {
            $columnIndex = $index;
            break;
        }
    }
    $filteredRows = [];
    foreach ($rows as $row) {
        $cells = $row->getElementsByTagName('td');
        $cellContent = $cells->item($columnIndex)->nodeValue;
        if (stripos($cellContent, $content) !== false) {
            $filteredRows[] = $row;
        }
    }
    // Build the filtered table HTML
    $filteredTableHtml = '<table class="wikitable sortable">';
    $filteredTableHtml .= $headerRow->ownerDocument->saveHTML($headerRow);
    foreach ($filteredRows as $row) {
        $filteredTableHtml .= $row->ownerDocument->saveHTML($row);
    }
    $filteredTableHtml .= '</table>';

    return count($filteredRows) > 0 ? $filteredTableHtml : false;
}
function addCopyButtons() {
    $dom = new DOMDocument();
    libxml_use_internal_errors(true);
    global $table_html;
    $dom->loadHTML($table_html);
    libxml_clear_errors();
    $xpath = new DOMXPath($dom);
    $headerRow = $xpath->query('//table/tbody/tr[1]')->item(0);
    $headerCells = $headerRow->getElementsByTagName('th');
    echo '<div>';
    foreach ($headerCells as $index => $cell) {
        $columnName = trim($cell->nodeValue);
        echo '<button onclick="copyColumnData(' . $index . ')">Copy ' . $columnName . '</button>';
    }
    echo '</div>';
}
?>
<script>
// Function to copy the column data to the clipboard
function copyColumnData(columnIndex) {
  var table = document.querySelector('.wikitable');
  var columnData = '';
  var rows = table.getElementsByTagName('tr');
  for (var i = 0; i < rows.length; i++) {
    var row = rows[i];
    var cells = row.getElementsByTagName('td');
    var cell = cells[columnIndex];
    if (cell) {
      columnData += cell.innerText.trim() + '\n';
    }
  }
  navigator.clipboard.writeText(columnData);
  //alert('Column data copied to clipboard.');
}
</script>


______________________________

Add <br> tags to nonconf html files in folder:
--------------------------------------------

<?php
$currentFolder = './'; // Update this to the path of the current folder
// Check if a file was uploaded
if (isset($_FILES['htmlFile']) && $_FILES['htmlFile']['error'] === UPLOAD_ERR_OK) {
    $uploadedFile = $_FILES['htmlFile']['tmp_name'];
    $fileName = $_FILES['htmlFile']['name'];
    $fileSize = $_FILES['htmlFile']['size'];

    // Check if the file size is within the allowed limit (1MB)
    $maxFileSize = 1024 * 1024; // 1MB in bytes
    if ($fileSize <= $maxFileSize) {
        // Move the uploaded file to the current folder
        $destination = $currentFolder . $fileName;
        move_uploaded_file($uploadedFile, $destination);
        echo "File uploaded successfully: $fileName<br>";
    } else {
        echo "File size exceeds the maximum allowed limit (1MB)<br>";
    }
}
$files = glob($currentFolder . '*.html'); // Get all HTML files in the current folder
// Sort the files by modified time (newest first)
usort($files, function ($a, $b) {
    return filemtime($b) - filemtime($a);
});
// Get the three newest HTML files
$newestFiles = array_slice($files, 0, 3);
// Display the file list
echo '<h3>Latest HTML Files:</h3>';
echo '<ul>';
foreach ($newestFiles as $file) {
    echo '<li><a href="?file=' . urlencode($file) . '">' . basename($file) . '</a></li>';
}
echo '</ul>';
// Check if a file is clicked and add <br> tags to it
if (isset($_GET['file'])) {
    $clickedFile = $_GET['file'];
    if (in_array($clickedFile, $newestFiles)) {
        $content = file_get_contents($clickedFile); // Read the file content
        // Check if the file does not contain a <br> tag
        if (strpos($content, '<br>') === false) {
            $modifiedContent = str_replace("\n", "<br>\n", $content); // Add <br> tag to each line
            file_put_contents($clickedFile, $modifiedContent); // Write the modified content back to the file
            echo "Added <br> tags to $clickedFile<br>";
        } else {
            echo "The file $clickedFile already contains <br> tags<br>";
        }
    } else {
        echo "Invalid file clicked<br>";
    }
}
?>
<!-- HTML form for file upload -->
<h3>Upload HTML File:</h3>
<form method="POST" enctype="multipart/form-data">
    <input type="file" name="htmlFile" accept=".html" required>
    <input type="hidden" name="MAX_FILE_SIZE" value="1048576"> <!-- 1MB in bytes -->
    <button type="submit">Upload</button>
</form>



___________________________

Visualize past programming efforts (php):
-----------------------------------------

<?php
$url = "https://alcea-wisteria.de/PHP/0demo/";
$html = file_get_contents($url);
$pattern = '/<tr>(.*?)<\/tr>/s';
preg_match_all($pattern, $html, $matches);
$dates = array();
foreach ($matches[0] as $match) {
    preg_match('/\d{4}-\d{2}-\d{2}/', $match, $date);
    if (!empty($date)) {
        $dates[] = $date[0];
    }
}
// Count the occurrences of each month-year combination
$counts = array();
foreach ($dates as $date) {
    $monthYear = substr($date, 0, 7); // Extract the yyyy-mm part
    if (isset($counts[$monthYear])) {
        $counts[$monthYear]++;
    } else {
        $counts[$monthYear] = 1;
    }
}
// Fill in months with no entries and set their count to 0
$startDate = min(array_keys($counts));
$endDate = date('Y-m'); // Get the current month-year
$currentDate = $startDate;
while ($currentDate != $endDate) {
    if (!isset($counts[$currentDate])) {
        $counts[$currentDate] = 0;
    }
    $currentDate = date('Y-m', strtotime($currentDate . ' +1 month'));
}
// Sort the month-year combinations by year and then month
ksort($counts);
// Prepare the data for the chart
$labels = array_keys($counts);
$data = array_values($counts);
?>
<!DOCTYPE html>
<html>
<head>
    <title>Date Chart</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>
    <canvas id="myChart"></canvas>
    <script>
        // Create the chart
        var ctx = document.getElementById('myChart').getContext('2d');
        var myChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: <?php echo json_encode($labels); ?>,
                datasets: [{
                    label: 'Date Counts',
                    data: <?php echo json_encode($data); ?>,
                    backgroundColor: 'rgba(75, 192, 192, 0.2)',
                    borderColor: 'rgba(75, 192, 192, 1)',
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: true,
                        stepSize: 1
                    }
                }
            }
        });
    </script>
</body>


________________________

Simple (UrlValueBased) Comment System:
---------------------------------

<===========NormalSubmitVersion=============>
<div id="comments"></div>
<br>
<form action="" method="POST" id="commentForm">
  <input type="text" name="name" placeholder="Your Name"><br>
  <textarea name="comment" rows="4" cols="50"></textarea>
  <input type="hidden" name="jsonFilename" value="" id="jsonFilenameInput">
  <input type="submit" value="Submit"><br>
</form>
<script>
  window.addEventListener("DOMContentLoaded", function() {
//    fetch('comments.txt')
//      .then(response => response.text())
//      .then(data => {
//        urlbase = data.trim(); // Assign the value to urlbase
//      })
    var urlbase = "https://alcea-wisteria.de/PHP/0demo/2024-02-05-UrlValueBasedCommentSystem/";
    var url = window.location.href;
    var jsonFilename = url.replace(/[^A-Za-z0-9]/g, "") + ".json";
    var jsonUrl = urlbase + jsonFilename;
    document.getElementById("jsonFilenameInput").value = jsonFilename;
    document.getElementById("commentForm").action = urlbase + "submit_comment.php";
    fetch(jsonUrl)
      .then(response => response.json())
      .then(data => {
        if (Array.isArray(data)) {
          data.reverse();
          data.forEach(entry => {
            var comment = entry.comment;
            var name = entry.name;
            renderComment(name, comment);
          });
        } else {
          console.log("No comments found for the current URL.");
        }
      })
      .catch(error => {
        console.log("Error fetching JSON file:", error);
      });
  });
  function renderComment(name, comment) {
    var commentsElement = document.getElementById("comments");
    var commentElement = document.createElement("div");
    commentElement.innerHTML = "<strong>" + name + "</strong>: " + comment;
    commentsElement.appendChild(commentElement);
  }
</script>


<=======UrlSubmitVersion=======>
ICA8IS0tLVVzZXJTdWJtaXR0ZWRSYWRpb1N0YXRpb24tLS0+CjxkaXYgaWQ9ImNvbW1lbnRzIj48L2Rpdj4KPGhyPgo8Zm9ybSBhY3Rpb249IiIgbWV0aG9kPSJQT1NUIiBpZD0iY29tbWVudEZvcm0iPgogIDwhLS0tPGlucHV0IHR5cGU9InRleHQiIG5hbWU9Im5hbWUiIHBsYWNlaG9sZGVyPSJTdGF0aW9uIE5hbWUiIHBhdHRlcm49Il5bXjxdKiQiIHRpdGxlPSJJbnZhbGlkIGNoYXJhY3RlcjogPCBpcyBub3QgYWxsb3dlZCI+PGJyPi0tLT4KICA8aW5wdXQgdHlwZT0idGV4dCIgbmFtZT0ibmFtZSIgcGxhY2Vob2xkZXI9IlN0YXRpb24gTmFtZSI+PGJyPgogIDwhLS08aW5wdXQgdHlwZT0idXJsIiBwYXR0ZXJuPSJodHRwcz86Ly8uKiIgcGxhY2Vob2xkZXI9IkVudGVyIFVSTCBzdGFydGluZyB3aXRoIGh0dHA6Ly8gb3IgaHR0cHM6Ly8iIHJlcXVpcmVkPi0tPgogIDx0ZXh0YXJlYSBuYW1lPSJjb21tZW50IiByb3dzPSIxIiBjb2xzPSI1MCIgcGxhY2Vob2xkZXI9InN0cmVhbSBodHRwczovLyB1cmwiPjwvdGV4dGFyZWE+CiAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ianNvbkZpbGVuYW1lIiB2YWx1ZT0iIiBpZD0ianNvbkZpbGVuYW1lSW5wdXQiPgogIDxpbnB1dCB0eXBlPSJzdWJtaXQiIHZhbHVlPSJTdWJtaXQiIG9uY2xpY2s9InN1Ym1pdF9jb21tZW50KCkiPjxicj4KPC9mb3JtPgo8c2NyaXB0PgogIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCJET01Db250ZW50TG9hZGVkIiwgZnVuY3Rpb24oKSB7CiAgICB2YXIgdXJsYmFzZSA9ICJodHRwczovL2FsY2VhLXdpc3RlcmlhLmRlL1BIUC8wZGVtby8yMDI0LTAyLTA1LVVybFZhbHVlQmFzZWRDb21tZW50U3lzdGVtLyI7CiAgICB2YXIgdXJsID0gd2luZG93LmxvY2F0aW9uLmhyZWY7CiAgICB2YXIganNvbkZpbGVuYW1lID0gdXJsLnJlcGxhY2UoL1teQS1aYS16MC05XS9nLCAiIikgKyAiLmpzb24iOwogICAgdmFyIGpzb25VcmwgPSB1cmxiYXNlICsganNvbkZpbGVuYW1lOwogICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImpzb25GaWxlbmFtZUlucHV0IikudmFsdWUgPSBqc29uRmlsZW5hbWU7CiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiY29tbWVudEZvcm0iKS5hY3Rpb24gPSB1cmxiYXNlICsgInN1Ym1pdF9jb21tZW50LnBocCI7CiAgICBmZXRjaChqc29uVXJsKQogICAgICAudGhlbihyZXNwb25zZSA9PiByZXNwb25zZS5qc29uKCkpCiAgICAgIC50aGVuKGRhdGEgPT4gewogICAgICAgIGlmIChBcnJheS5pc0FycmF5KGRhdGEpKSB7CiAgICAgICAgICBkYXRhLnJldmVyc2UoKTsKICAgICAgICAgIGRhdGEuZm9yRWFjaChlbnRyeSA9PiB7CiAgICAgICAgICAgIHZhciBjb21tZW50ID0gZW50cnkuY29tbWVudDsKICAgICAgICAgICAgdmFyIG5hbWUgPSBlbnRyeS5uYW1lOwogICAgICAgICAgICByZW5kZXJDb21tZW50KG5hbWUsIGNvbW1lbnQpOwogICAgICAgICAgfSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGNvbnNvbGUubG9nKCJObyBjb21tZW50cyBmb3VuZCBmb3IgdGhlIGN1cnJlbnQgVVJMLiIpOwogICAgICAgIH0KICAgICAgfSkKICAgICAgLmNhdGNoKGVycm9yID0+IHsKICAgICAgICBjb25zb2xlLmxvZygiRXJyb3IgZmV0Y2hpbmcgSlNPTiBmaWxlOiIsIGVycm9yKTsKICAgICAgfSk7CiAgfSk7CiAgZnVuY3Rpb24gcmVuZGVyQ29tbWVudChuYW1lLCBjb21tZW50KSB7CiAgICB2YXIgY29tbWVudHNFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImNvbW1lbnRzIik7CiAgICB2YXIgY29tbWVudEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKTsKICAgIGNvbW1lbnRFbGVtZW50LmlubmVySFRNTCA9ICI8c3Ryb25nPiIgKyBuYW1lICsgIjwvc3Ryb25nPjogIiArIGNvbW1lbnQ7CiAgICBjb21tZW50c0VsZW1lbnQuYXBwZW5kQ2hpbGQoY29tbWVudEVsZW1lbnQpOwogIH0KICBmdW5jdGlvbiBzdWJtaXRfY29tbWVudCgpIHsKICAgIHZhciBjb21tZW50SW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCd0ZXh0YXJlYVtuYW1lPSJjb21tZW50Il0nKTsKICAgIHZhciBjb21tZW50VmFsdWUgPSBjb21tZW50SW5wdXQudmFsdWU7CiAgICAvL2NvbW1lbnRJbnB1dC52YWx1ZSA9ICc8YSBocmVmPSIjIiBvbmNsaWNrPSJkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcJ3VybElucHV0XCcpLnZhbHVlID0gXCcnICsgY29tbWVudFZhbHVlICsgJ1wnOyByZXR1cm4gZmFsc2U7Ij4nICsgY29tbWVudFZhbHVlICsgJzwvYT4nOwogICAgY29tbWVudElucHV0LnZhbHVlID0gJzxhIGhyZWY9IiMiIG9uY2xpY2s9ImRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwndXJsSW5wdXRcJykudmFsdWUgPSBcJycgKyBjb21tZW50VmFsdWUgKyAnXCc7IHJldHVybiBmYWxzZTsiPicgKyBjb21tZW50VmFsdWUgKyAnPC9hPic7CiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiY29tbWVudEZvcm0iKS5zdWJtaXQoKTsKICB9Cjwvc2NyaXB0Pg==

====submit_comment.php===

<?php
if ($_SERVER["REQUEST_METHOD"] === "POST") {
  $url = $_SERVER["HTTP_REFERER"]; // Get the current URL
  $filename = preg_replace("/[^A-Za-z0-9]/", "", $url); // Remove non-alphanumeric characters from the URL
  $name = $_POST["name"]; // Get the submitted name
  $comment = $_POST["comment"]; // Get the submitted comment
  $jsonFilename = $_POST["jsonFilename"]; // Get the submitted jsonFilename
  // Read the existing JSON data from the file
  $existingData = file_get_contents($jsonFilename);
  $existingJson = json_decode($existingData, true);
  if (!$existingJson) {
    // If the JSON file doesn't exist or is not valid JSON, create an empty array
    $existingJson = [];
  }
  // Create a new data entry with the submitted name and comment
  $newData = array(
    "name" => $name,
    "comment" => $comment
  );
  // Append the new data to the existing JSON data
  $existingJson[] = $newData;
  // Encode the merged data as JSON
  $json = json_encode($existingJson);
  // Write the updated JSON back to the file
  file_put_contents($jsonFilename, $json);
  echo "<a href=javascript:history.back()>[View Comment]</a>";
}
?>


====.htaccess======
Header set Access-Control-Allow-Origin "*"
Header set Access-Control-Allow-Methods "GET,PUT,POST,DELETE"
Header set Access-Control-Allow-Headers "Content-Type, Authorization"



____________________

Simple PHP Gallery:
---------------------------------

======index.php=====
<?php
$galleriesPath = "./galleries";
$galleries = array_filter(glob($galleriesPath . '/*'), 'is_dir');
echo '<div style="display: grid; grid-template-columns: repeat(5, 1fr); grid-gap: 10px;">';
foreach ($galleries as $gallery) {
    $images = glob($gallery . '/*.{jpg,jpeg,png,gif}', GLOB_BRACE);
    $newestImage = end($images);
    $galleryName = basename($gallery);
    $displayUrl = 'display.php?gallery=' . urlencode($galleryName);
    echo '<a href="' . $displayUrl . '" style="text-decoration: none; color: inherit;">';
    echo '<div style="text-align: center;">';
    $isNSFW = stripos($galleryName, 'nsfw') !== false;
    // Apply blur if the image is NSFW
    $imageStyle = $isNSFW ? 'filter: blur(10px);' : '';
    echo '<img src="' . $newestImage . '" alt="' . $galleryName . '" width="250" height="250" style="margin-bottom: 5px;' . $imageStyle . '">';
    echo '<div>' . $galleryName . '</div>';
    echo '</div>';
    echo '</a>';
}
echo '</div>';
?>



===display.php====
<a href="<?php echo dirname($_SERVER['REQUEST_URI']); ?>"><img src="https://www.downloadclipart.net/large/19185-back-button-design.png" style="width:40px;" /></a>
<?php
// Retrieve the gallery name from the query string
$galleryName = $_GET['gallery'];
$galleryPath = './galleries/' . $galleryName;
$images = glob($galleryPath . '/*.{jpg,jpeg,png,gif}', GLOB_BRACE);
// Custom sort function to sort images by basename
usort($images, function($a, $b) {
    $basenameA = pathinfo($a, PATHINFO_FILENAME);
    $basenameB = pathinfo($b, PATHINFO_FILENAME);
    return strcmp($basenameB, $basenameA);
});
$numColumns = 5;
$numImages = count($images);
$numRows = ceil($numImages / $numColumns);
echo '<div style="display: grid; grid-template-columns: repeat(' . $numColumns . ', 1fr); grid-gap: 10px;">';
foreach ($images as $key => $image) {
    echo '<div style="display: flex; flex-direction: column; align-items: center;">';
    echo '<img src="' . $image . '" alt="' . basename($image) . '" style="width: 250px; height: 250px; object-fit: cover; cursor: pointer;" onclick="openPopup(' . $key . ');" loading="lazy">';
    echo '<div style="text-align: center;">' . basename($image) . '</div>';
    echo '</div>';
}
echo '</div>';
?>
<!-- CSS Popup -->
<style>
    .popup {
        display: none;
        position: fixed;
        z-index: 9999;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(255, 255, 255, 0.9);
    }
    .popup-image {
        display: block;
        max-width: 90%;
        max-height: 80%;
        margin: 50px auto;
    }
    .popup-close {
        position: absolute;
        top: 10px;
        right: 10px;
        color: #000;
        cursor: pointer;
        font-size: 24px;
    }
    .popup-nav {
        position: absolute;
        top: 50%;
        transform: translateY(-50%);
        width: 100%;
        display: flex;
        justify-content: space-between;
        align-items: center;
        color: #000;
        font-size: 30px;
    }
    .popup-prev,
    .popup-next {
        padding: 20px;
        cursor: pointer;
    }
</style>
<!-- JavaScript -->
<script>
    var currentImageIndex = 0;
    var images = <?php echo json_encode($images); ?>;
    function openPopup(index) {
        currentImageIndex = index;
        var popup = document.getElementById('popup');
        var popupImage = document.getElementById('popup-image');
        popupImage.src = images[currentImageIndex];
        popup.style.display = 'block';
    }
    function closePopup() {
        var popup = document.getElementById('popup');
        popup.style.display = 'none';
    }
    function showPrevImage() {
        currentImageIndex = (currentImageIndex - 1 + images.length) % images.length;
        var popupImage = document.getElementById('popup-image');
        popupImage.src = images[currentImageIndex];
    }
    function showNextImage() {
        currentImageIndex = (currentImageIndex + 1) % images.length;
        var popupImage = document.getElementById('popup-image');
        popupImage.src = images[currentImageIndex];
    }
</script>
<!-- HTML Popup -->
<div id="popup" class="popup">
    <span class="popup-close" onclick="closePopup()">&times;</span>
    <div class="popup-nav">
        <span class="popup-prev" onclick="showPrevImage()">&#10094;</span>
        <span class="popup-next" onclick="showNextImage()">&#10095;</span>
    </div>
    <img id="popup-image" class="popup-image" src="" alt="">
</div>


=====upload.php===
    <div class="image-preview" id="imagePreview"></div>
    <style>
        .gallery-picker {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 300px;
        }
        .image-preview {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 400px;
            width: 1000px;
            border: 1px solid #ccc;
            margin-top: 20px;
        }
        .image-preview img {
            max-width: 100%;
            max-height: 100%;
        }
    </style>
</head>
<body>
    <div class="gallery-picker">
        <form action="upload.php" method="post" enctype="multipart/form-data">
            <select name="gallery">
                <?php
                $galleriesPath = 'galleries/';
                $folders = array_filter(glob($galleriesPath . '*'), 'is_dir');
                foreach ($folders as $folder) {
                    $folderName = basename($folder);
                    echo "<option value='$folderName'>$folderName</option>";
                }
                ?>
            </select>
            <input type="file" name="image" accept="image/*" onchange="previewImage(event)">
            <input type="submit" value="Upload">
        </form>
    </div>
    <script>
        function previewImage(event) {
            var reader = new FileReader();
            reader.onload = function() {
                var imgElement = document.createElement('img');
                imgElement.src = reader.result;
                document.getElementById('imagePreview').innerHTML = '';
                document.getElementById('imagePreview').appendChild(imgElement);
            }
            reader.readAsDataURL(event.target.files[0]);
        }
    </script>
    <?php
    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
        $gallery = $_POST['gallery'];
        $targetDirectory = $galleriesPath . $gallery . '/';
        $targetFile = $targetDirectory . basename($_FILES['image']['name']);
        $uploadSuccess = move_uploaded_file($_FILES['image']['tmp_name'], $targetFile);

        if ($uploadSuccess) {
            echo "<p>Image uploaded successfully.</p>";
        } else {
            echo "<p>Failed to upload image.</p>";
        }
    }
    ?>
</body>



_________________

Display htaccess:
-----------------------------

<?php
$htaccessPath = '.htaccess';
exists
if (file_exists($htaccessPath)) {
    $htaccessContent = file_get_contents($htaccessPath);
    echo "<pre>{$htaccessContent}</pre>";
} else {
    echo "The .htaccess file does not exist.";
}
?>

__________________________


Last played gamewriter
---------------------------

example link: https://alcea-wisteria.de/PHP/0demo/2024-01-14-Lastplayed/lastplayed.php?gamename=title<br><br>

<?php
$currentContent = file_get_contents('current.html');
$targetContent = file_get_contents('oldentries.html');
$updatedContent = $currentContent . $targetContent;
$linkpattern = '/<a\b[^>]*>(.*?)<\/a>/'; //remove link
$replacement = '';
$updatedContent = preg_replace($linkpattern, $replacement, $updatedContent);
file_put_contents('oldentries.html', $updatedContent);
?>
<?php
if(isset($_GET['gamename'])) {
    $gamename = $_GET['gamename'];
    $currentDateTime = date('Y-m-d H:i:s');
    $htmlContent = '<u>LastPlayed:</u> ' . $gamename . ' - (' . $currentDateTime . ') <a target="_blank" href="oldentries.html" style="color:gray">(old)</a><br>';
    file_put_contents('current.html', $htmlContent);
    //echo "Successfully updated current.html with the game name: $gamename and current date and time.";
    // Output the iframe with cache busting
    echo "<iframe src='current.html?" . time() . "' style='width: 100%; border: none;'></iframe>";
} else {
    echo "<iframe src='current.html?" . time() . "' style='width: 100%; border: none;'></iframe>";
}
?>

_________________


Fetch Fediverse Usercount:
-------------------------------------------

<?php
$url = 'https://api.fedidb.org/v1/stats';
$response = file_get_contents($url);
if ($response !== false) {
    $data = json_decode($response, true);
    if ($data !== null) {
        // Access the data and render
        $totalUsers = $data['total_users'];
        $activeUsers = $data['monthly_active_users'];
        $totalPosts = $data['total_statuses_str'];
        echo "Total Users: $totalUsers<br>";
        echo "Active Users: $activeUsers<br>";
        echo "Total Posts: $totalPosts<br>";
    } else {
        echo "Error: Failed to decode JSON response.";
    }
} else {
    echo "Error: Failed to fetch data from the API endpoint.";
}
?>

____________________________

Render textfile in style /(Parse and display *.txt as hyperlink html: (Delimiter: "https://")
--------------------------------------
<?php
$file = fopen('xnotes.txt', 'r');
if ($file) {
    while (($line = fgets($file)) !== false) {
        $line = trim($line);
        $parts = explode('https://', $line, 2);
        $title = $parts[0];
        $url = 'https://' . $parts[1];
        echo "<a href=\"$url\" target=\"_blank\">$title</a><br>";
    }
    fclose($file);
} else {
    echo 'Failed to open the file.';
}
?>


---Example txt--
YGO VRAINS: https://alcea-wisteria.de/PHP/xnotes/view.php?s-1705150073-e73eae915bceecad0f0413c3e6b713b0
Windows OS: https://alcea-wisteria.de/PHP/xnotes/view.php?s-1705150108-854bffd31ca032a51c3e06536ddbe493

__________________


Xnotes (evernote / nimbusnotes clone):
-----------------------------------------------------------
https://github.com/Xtrendence/X-Notes
=>
https://codeload.github.com/Xtrendence/X-Notes/zip/refs/heads/master 

______________________________________


PHP Gamedatabase (with html renderer):
-------------------------------------------

=================gamedb.php========
<!DOCTYPE html>
<html>
<head>
    <title>Sortable Table</title>
    <style>
        table {
            border-collapse: collapse;
            width: 100%;
        }
        th, td {
            text-align: left;
            padding: 8px;
        }
        th {
            cursor: pointer;
        }
        input[type="text"] {
            width: 100%;
            padding: 5px;
            margin-bottom: 10px;
        }
    </style>
</head>
<body>
    <?php
    // Function to write table data to a file
    function writeDataToFile($data, $filename) {
        $file = fopen($filename, 'w');
        fwrite($file, json_encode($data));
        fclose($file);
    }
    // Function to read table data from a file
    function readDataFromFile($filename) {
        if (file_exists($filename)) {
            $data = file_get_contents($filename);
            return json_decode($data, true);
        }
        return [];
    }
    // Database file name
    $dbFile = 'gamedb.json';
    // Check if a new entry is submitted
    if (isset($_POST['submit'])) {
        $newEntry = [
            'Gamename' => $_POST['gamename'],
            'System' => $_POST['system'],
            'Vendor' => $_POST['vendor'],
            'Comment' => $_POST['comment'],
            'Rating' => $_POST['rating'],
            'Description' => $_POST['description'],
            'link' => $_POST['link']
        ];
        // Read existing data from file
        $games = readDataFromFile($dbFile);
        // Add the new entry
        $games[] = $newEntry;
        // Write the updated data to file
        writeDataToFile($games, $dbFile);
    } else {
        // Read data from file
        $games = readDataFromFile($dbFile);
    }
    ?>
    <table>
        <tr>
            <th onclick="sortTable(0)">Gamename</th>
            <th onclick="sortTable(1)">System</th>
            <th onclick="sortTable(2)">Vendor</th>
            <th onclick="sortTable(3)">Comment</th>
            <th onclick="sortTable(4)">Rating</th>
            <th onclick="sortTable(5)">Description</th>
            <th onclick="sortTable(6)">Link</th>
        </tr>
        <?php foreach ($games as $game): ?>
            <tr>
                <td><?php echo $game['Gamename']; ?></td>
                <td><?php echo $game['System']; ?></td>
                <td><?php echo $game['Vendor']; ?></td>
                <td><?php echo $game['Comment']; ?></td>
                <td><?php echo $game['Rating']; ?></td>
                <td><?php echo $game['Description']; ?></td>
                <td><?php echo $game['link']; ?></td>
            </tr>
        <?php endforeach; ?>
    </table>
    <form method="post" action="">
        <input type="text" name="gamename" placeholder="Gamename" required>
        <input type="text" name="system" placeholder="System" required>
        <input type="text" name="vendor" placeholder="Vendor" required>
        <input type="text" name="comment" placeholder="Comment" required>
        <input type="text" name="rating" placeholder="Rating" required>
        <input type="text" name="description" placeholder="Description" required>
        <input type="text" name="link" placeholder="Link" required>
        <input type="submit" name="submit" value="Add Entry">
    </form>
    <script>
    // Function to sort the table
    function sortTable(columnIndex) {
        var table, rows, switching, i, x, y, shouldSwitch;
        table = document.getElementsByTagName("table")[0];
        switching = true;
        while (switching) {
            switching = false;
            rows = table.rows;
            for (i = 1; i < (rows.length - 1); i++) {
                shouldSwitch = false;
                x = rows[i].getElementsByTagName("td")[columnIndex];
                y = rows[i + 1].getElementsByTagName("td")[columnIndex];
                if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {
                    shouldSwitch = true;
                    break;
                }
            }
            if (shouldSwitch) {
                rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
                switching = true;
            }
        }
    }
    // Add event listeners to table headers for sorting
    var headers = document.getElementsByTagName("th");
    for (var i = 0; i < headers.length; i++) {
        headers[i].addEventListener("click", function () {
            var columnIndex = Array.from(this.parentNode.children).indexOf(this);
            sortTable(columnIndex);
        });
    }
</script>
</body>
</html>


======html json renderer====
<style>
    table {
      border-collapse: collapse;
      width: 100%;
    }
    th, td {
      padding: 8px;
      text-align: left;
      border-bottom: 1px solid #ddd;
    }
    th {
      background-color: #f2f2f2;
      cursor: pointer;
    }
    th::after {
      content: "";
      display: inline-block;
      margin-left: 5px;
    }
    .asc::after {
      content: "^";
    }
    .desc::after {
      content: "v";
    }
  </style>
</head>
<body>
  <table id="gameTable">
    <thead>
      <tr>
        <th onclick="sortTable(0)">Game Name</th>
        <th onclick="sortTable(1)">System</th>
        <th onclick="sortTable(2)">Vendor</th>
        <th onclick="sortTable(3)">Comment</th>
        <th onclick="sortTable(4)">Rating</th>
        <th onclick="sortTable(5)">Description</th>
        <th onclick="sortTable(6)">Link</th>
      </tr>
    </thead>
    <tbody id="gameTableBody"></tbody>
  </table>
  <script>
    let sortingOrder = {};
    // Function to fetch the JSON data and populate the table
    function fetchGameData() {
      fetch('gamedb.json')
        .then(response => response.json())
        .then(data => {
          const gameTableBody = document.getElementById('gameTableBody');
          gameTableBody.innerHTML = '';
          data.forEach(game => {
            const row = document.createElement('tr');
            row.innerHTML = `
              <td>${game.Gamename}</td>
              <td>${game.System}</td>
              <td>${game.Vendor}</td>
              <td>${game.Comment}</td>
              <td>${game.Rating}</td>
              <td>${game.Description}</td>
              <td><a href="${game.link}">Link</a></td>
            `;
            gameTableBody.appendChild(row);
          });
        })
        .catch(error => {
          console.error('Error:', error);
        });
    }
    // Function to sort the table based on the selected column
    function sortTable(columnIndex) {
      const table = document.getElementById('gameTable');
      const rows = Array.from(table.rows).slice(1); // Exclude the table header row
      const asc = sortingOrder[columnIndex] === 'asc';
      rows.sort((a, b) => {
        const cellA = a.cells[columnIndex].textContent.toLowerCase();
        const cellB = b.cells[columnIndex].textContent.toLowerCase();
        return asc ? cellA.localeCompare(cellB) : cellB.localeCompare(cellA);
      });
      table.tBodies[0].append(...rows);
      // Update sortingOrder for the current column
      sortingOrder = {};
      sortingOrder[columnIndex] = asc ? 'desc' : 'asc';
      // Update CSS classes for sorting indicators
      const ths = table.tHead.rows[0].cells;
      ths.forEach(th => th.classList.remove('asc', 'desc'));
      ths[columnIndex].classList.add(sortingOrder[columnIndex]);
    }
    // Fetch the game data when the page loads
    fetchGameData();
  </script>
</body>
</html>



___________________________

Check Files & Folders against txt (integrity check):
-----------------------------------------

<details><a target="_blank" href="z_listgen.php" style=color:blue>Refresh list</a></details><br><br>
<?php
$reportPath = './z_list.txt';
$reportContent = file_get_contents($reportPath);
$currentDir = getcwd();
$reportFiles = explode("\n", $reportContent);
$fileCount = 0;
$folderCount = 0;
$okCount = 0;
$missingCount = 0;
$files = [];
$folders = [];
foreach ($reportFiles as $filename) {
    if (empty($filename)) {
        continue;
    }
    if (is_dir($filename)) {
        $folderCount++;
        $folders[] = $filename;
        continue;
    }
    if ($filename === 'error_log' || $filename === 'alceawis.de.zip') {
        continue;
    }
    if (file_exists($filename)) {
        $fileCount++;
        $okCount++;
        $files[] = '<span style="color: green;">[ok]</span> <a href="' . $filename . '" target="_blank">' . $filename . '</a>';
    } else {
        $missingCount++;
        $files[] = '<span style="color: red;">[missing]</span> ' . $filename;
    }
}
foreach (scandir($currentDir) as $filename) {
    if ($filename[0] === '.' || is_dir($filename) || $filename === 'z_listcheck.php' ) {
        continue;
    }
    if ($filename === 'error_log' || $filename === 'alceawis.de.zip') {
        continue;
    }
    if (!in_array($filename, $reportFiles)) {
        $fileCount++;
        $missingCount++;
        $files[] = '<span style="color: red;">[missing]</span> ' . $filename;
    }
}
foreach ($folders as $folder) {
    echo '<span style="color: green;">[ok]</span> <a href="' . $folder . '" target="_blank">' . $folder . '</a><br>';
}
foreach ($files as $file) {
    echo $file . '<br>';
}
echo '<p>Total Files: ' . $fileCount . ' Total Folders: ' . $folderCount . '</p>';
echo '<hr>';
echo '<p>Number [ok]: ' . $okCount;
if ($okCount === $fileCount) {
    echo ' (all)';
}
echo '</p>';
echo '<p>Number of missing: ' . $missingCount . '</p>';
?>

====z_listgen.php===

<?php
// Get the current directory
$directory = __DIR__;
// Open the file for writing
$file = fopen('z_list.txt', 'w');
// Get all files and directories in the current directory
$items = scandir($directory);
// Iterate through each item
foreach ($items as $item) {
    // Exclude current and parent directory entries
    if ($item !== '.' && $item !== '..') {
        // Check if the item is a directory
        if (is_dir($directory . DIRECTORY_SEPARATOR . $item)) {
            // Write directory name to the file
            fwrite($file, $item . PHP_EOL);
        } else {
            // Write file name to the file
            fwrite($file, $item . PHP_EOL);
        }
    }
}
// Close the file
fclose($file);
echo 'File list generated and saved to z_list.txt.';
?>


__________________________

Find AnimexxUser+ (Artcount)
---------------------------

<a target="_blank" href="?artistname=Nudelchen" style=color:lightgray>custom</a><br>
<?php
$url = 'https://www.animexx.de/fanart/zeichner/A/';
if (isset($_GET['artistname'])) {
    $artistname = $_GET['artistname'];
    $firstLetter = strtoupper(substr($artistname, 0, 1));
    $url = str_replace('/zeichner/A/', '/zeichner/' . $firstLetter . '/', $url);
} else {
    $artistname = 'Alcea';
}
$html = file_get_contents($url);
$pattern = '/<b><a href="\/fanart\/zeichner\/\d+\/">' . $artistname . '<\/a><\/b> \(\d+\)/';
preg_match_all($pattern, $html, $matches);
if (!empty($matches[0])) {
    $artistLines = $matches[0];
    $parsedUrl = parse_url($url);
    $domain = $parsedUrl['scheme'] . '://' . $parsedUrl['host'];
    foreach ($artistLines as $line) {
        // Prepend the domain to the href attribute within the $line
        $line = str_replace('href="/', 'href="' . $domain . '/', $line);
        $line = str_replace('<a ', '<a target="_blank" ', $line);
        echo $line . "<br>";
    }
} else {
    echo "No matching lines found for '{$artistname}'.";
}
?>

_________________


Fetch all pixiv user artwork links:
----------------------

<a target="_blank" href="?userId=18233080" style="color:blue">custom</a> <a target="_blank" href="?random" style="color:blue">(Random)</a><br>
<div id="linkCount"></div><br>
<?php
function getPixivUserArt($userId, $random) {
    $apiUrl = "https://www.pixiv.net/ajax/user/{$userId}/profile/all?useid={$userId}";
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $apiUrl);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_HEADER, false);
    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
    $response = curl_exec($ch);
    curl_close($ch);
    $data = json_decode($response, true);
    if (isset($data['body']['illusts'])) {
        $artworks = $data['body']['illusts'];
        $numLinks = 0; // Variable to keep track of the number of links
        if ($random) {
            // Get a random artwork
            $randomArtId = array_rand($artworks);
            $randomArt = $artworks[$randomArtId];
            $artLink = "https://www.pixiv.net/artworks/{$randomArtId}";
            echo "Link: <a target=_blank href=\"{$artLink}\">{$artLink}</a><br>\n";
            $numLinks++; // Increment the link counter
        } else {
            foreach ($artworks as $artId => $art) {
                $artLink = "https://www.pixiv.net/artworks/{$artId}";
                echo "Link: <a target=_blank href=\"{$artLink}\">{$artLink}</a><br>\n";
                $numLinks++; // Increment the link counter
            }
        }
        // Display the number of links found within the div
        echo "<script>document.getElementById('linkCount').innerHTML = 'Number of artworks: $numLinks';</script>";
    } else {
        echo "No artworks found for the given user.";
    }
}
// Usage example
$userId = isset($_GET['userId']) ? $_GET['userId'] : '75406576';
$random = isset($_GET['random']);
getPixivUserArt($userId, $random);
?>


____________________________


Generate Linklist from folderpath
-----------------------------------------------------

<?php
$defaultDirectory = 'other/music/midi/piano/';
$directory = isset($_GET['path']) ? $_GET['path'] : $defaultDirectory;
// Sanitize the directory path
$directory = rtrim($directory, '/') . '/';
// Scan the directory for MIDI files
$files = glob($directory . '*.mid');
// Create a linked list of target blank links
$linkList = '<ul>';
foreach ($files as $file) {
    $filename = basename($file);
    $linkList .= '<li><a href="' . $file . '" target="_blank">' . $filename . '</a></li>';
}
$linkList .= '</ul>';
// Output the linked list and the form
echo '<form method="get" action="">';
echo 'Folder: <input type="text" name="path" value="' . $directory . '">';
echo '<input type="submit" value="Generate List">';
echo '</form>';
echo $linkList;
?>

__________________________________

Enable Cors for folder (via .htaccess):
-------------------------------------------------------------

# Add these three lines to CORSify your server for everyone.

Header set Access-Control-Allow-Origin "*"
Header set Access-Control-Allow-Methods "GET,PUT,POST,DELETE"
Header set Access-Control-Allow-Headers "Content-Type, Authorization"

(source: https://gist.github.com/nixta/0b98d7975562bc31c4c9 )

__________________________________

Pkehex qrcode image team box render:
-----------------------------------------------------------

    <style>
        .grid {
            display: grid;
            grid-template-columns: repeat(10, 1fr);
            //grid-column-gap: -50px;
            grid-row-gap: 20px; /* Spaces between grid elements on the y-axis */
        }
        .grid .image {
            width: 45px;
            height: 45px;
            background-size: 800% 800%;
            background-repeat: no-repeat;
            background-position: center -137px;
            cursor: pointer;
            transition: transform 0.2s;
            position: relative;
            margin-right: -5px;
        }
        .grid .image:hover {
            transform: scale(2);
            z-index: 2; //always hover above
        }
        .pokemon-name {
            position: absolute;
            bottom: -20px;
            left: 0;
            width: 100%;
            text-align: center;
            font-size: 12px;
        }
        #iframe-container {
            position: fixed;
            bottom: 10px;
            right: 10px;
            width: 300px;
            height: 200px;
            background-color: #f2f2f2;
        }
        #image-preview {
            width: 100%;
            height: 100%;
            object-fit: contain;
        }
    </style>
</head>
<body>
    <div class="grid">
        <?php
        $folder = 'pkmn';
        $files = glob($folder . '/*.jpg');
        foreach ($files as $file) {
            $filename = basename($file);
            $pokemonName = substr($filename, 0, strpos($filename, '_'));
            echo '<div class="image" style="background-image: url(\'' . $file . '\');" onclick="displayImage(\'' . $file . '\')">';
            echo '<div class="pokemon-name">' . $pokemonName . '</div>';
            echo '</div>';
        }
        ?>
    </div>
    <div id="iframe-container">
        <a href="#" onclick="window.open(document.getElementById('image-preview').src, '_blank').focus(); return false;"><img id="image-preview" src="" alt="Preview"></a>
    </div>
    <script>
        function displayImage(imageUrl) {
            var imagePreview = document.getElementById('image-preview');
            imagePreview.src = imageUrl;
        }
    </script>

____________________________________

Animexx Art parse:
---------------------------------


<a target="_blank" href="?creator=1049853/" style=color:lightorange>custom</a><br><br>
<!---<a target="_blank" href="https://www.animexx.de/fanart/zeichner/1248943/" style=color:blue>Cea</a>-->
<a href="findlinksnimgsnquerystring.php" style=color:blue>[[0]]</a> 
<a href="?creator=1248943?seite=1" style=color:blue>[1]</a> 
<a href="?creator=1248943?seite=2" style=color:blue>[2]</a> 
<a href="?creator=1248943?seite=3" style=color:blue>[3]</a> 
<br><br>
<?php
error_reporting(0); // Disable error reporting
if (@isset($_GET['seite']) && @isset($_GET['creator'])) {
    $seite = $_GET['seite'];
    $creator = $_GET['creator'];
    $url = '';
} elseif (@isset($_GET['seite'])) {
    $seite = $_GET['seite'];
    $url = 'https://www.animexx.de/fanart/zeichner/1248943/?seite=' . $seite;
} elseif (@isset($_GET['creator'])) {
    $creator = $_GET['creator'];
    $url = 'https://www.animexx.de/fanart/zeichner/' . $creator . '/';
} else {
    $url = 'https://www.animexx.de/fanart/zeichner/1248943/';
}
$baseurl = preg_replace('/\?.*/', '', $url);
$newurl = str_replace("?seite=", "/?seite=", $url);
echo "<a href='$newurl' target='_blank'>$newurl</a>";
//echo "<a href='$url' target='_blank'>$baseurl/?seite=' . $seite'</a>";
$html = @file_get_contents($url);
$doc = new DOMDocument();
@$doc->loadHTML($html);
$xpath = new DOMXPath($doc);
$fathumbTags = $xpath->query('//td[@class="fathumb"]');
$fatitelTags = $xpath->query('//td[@class="fatitel"]');
$faextinfoTags = $xpath->query('//td[@class="faextinfo"]');
foreach ($fathumbTags as $index => $fathumbTag) {
    $href = @$fathumbTag->getElementsByTagName('a')->item(0)->getAttribute('href');
    $imgSrc = @$fathumbTag->getElementsByTagName('img')->item(0)->getAttribute('src');
    echo "<a href='$imgSrc$href' target='_blank'></a>";
    $fatitelTag = @$fatitelTags->item($index);
    $title = @$fatitelTag->getElementsByTagName('b')->item(0)->textContent;
    echo "<br><a href='$baseurl/$href' target='_blank'><b>$title</b></a>";
    $linkedHtml = @file_get_contents("$url$href");
    $linkedDoc = new DOMDocument();
    @$linkedDoc->loadHTML($linkedHtml);
    $linkedImgTag = @$linkedDoc->getElementsByTagName('img')->item(0);
    $linkedImgSrc = @$linkedImgTag->getAttribute('src');
    echo "<br><img src='$linkedImgSrc' alt='Linked Image' style='width: 200px; height: auto;'>";
    $faextinfoTag = @$faextinfoTags->item($index);
    $faextinfo = @$faextinfoTag->textContent;
    $faextinfo = preg_replace('/(\d)(?![\d.])/', '<br>$1', $faextinfo);
    $faextinfo = preg_replace("/(Note)/", "<br>$1", $faextinfo);
    echo "<br>$faextinfo";
    echo "<br><br>";
}
?>



-----TRASH---31\12\2023----
<?php
$defaultUrl = 'https://www.animexx.de/fanart/zeichner/1248943/';
if (isset($_GET['creator'])) {
    $creator = $_GET['creator'];
    $url = $creator;
} else {
    $url = $defaultUrl;
}
$html = file_get_contents($url);
$pattern = '/<td class="fathumb" rowspan="2"><a\s+href="([^"]+)"\s+target="([^"]+)"[^>]*>/';
preg_match_all($pattern, $html, $matches, PREG_SET_ORDER);
// Create a DOMXPath object
$dom = new DOMDocument();
$dom->loadHTML($html);
$xpath = new DOMXPath($dom);
$query = '//td[@class="faextinfo"]';
$tdElements = $xpath->query($query);
// Iterate over the <td> elements and display their content
$tdContentArray = [];
foreach ($tdElements as $tdElement) {
    $tdContent = $tdElement->ownerDocument->saveHTML($tdElement);
    $tdContentArray[] = $tdContent;
}
foreach ($matches as $index => $match) {
    $link = $match[1];
    $target = $match[2];
    $validLink = $url . ltrim($link, '/');
    $linkHtml = file_get_contents($validLink);
    $imgPattern = '/<img\s+src="([^"]+)"\s+id="fanart_img_gross"\s+alt="([^"]+)"[^>]*>/';
    preg_match($imgPattern, $linkHtml, $imgMatch);
    if (isset($imgMatch[1]) && isset($imgMatch[2])) {
        $imgSrc = $imgMatch[1];
        $imgAlt = $imgMatch[2];
        echo '<br><br><a href="' . $validLink . '" target="' . $target . '">' . $validLink . '</a><br>';
        echo '<img src="' . $imgSrc . '" alt="' . $imgAlt . '" width=50%><br>';
    }
    // Check if there is a corresponding faextinfo entry
    if (isset($tdContentArray[$index])) {
        echo $tdContentArray[$index];
    }
}
?>

<~~~~~~~~~~~~without faetext ~~~~~~~~~~~>

<a target="_blank" href="?creator=https://www.animexx.de/fanart/zeichner/1049853/" style=color:lightorange>custom</a><br><br>
<?php
$defaultUrl = 'https://www.animexx.de/fanart/zeichner/1248943/';
if (isset($_GET['creator'])) {
    $creator = $_GET['creator'];
    $url = $creator;
} else {
    $url = $defaultUrl;
}
$html = file_get_contents($url);
$pattern = '/<td class="fathumb" rowspan="2"><a\s+href="([^"]+)"\s+target="([^"]+)"[^>]*>/';
preg_match_all($pattern, $html, $matches, PREG_SET_ORDER);
foreach ($matches as $match) {
    $link = $match[1];
    $target = $match[2];
    $validLink = $url . ltrim($link, '/');
    $linkHtml = file_get_contents($validLink);
    $imgPattern = '/<img\s+src="([^"]+)"\s+id="fanart_img_gross"\s+alt="([^"]+)"[^>]*>/';
    preg_match($imgPattern, $linkHtml, $imgMatch);
    if (isset($imgMatch[1]) && isset($imgMatch[2])) {
        $imgSrc = $imgMatch[1];
        $imgAlt = $imgMatch[2];
        echo '<a href="' . $validLink . '" target="' . $target . '">' . $validLink . '</a><br>';
        echo '<img src="' . $imgSrc . '" alt="' . $imgAlt . '" width=50%><br>';
    }
}
?>

______________________

Mastodon extract preview_cards:
----------------------------------------------------

<?php
$url = 'https://mastodon.social/api/v1/accounts/109977878421486714/statuses';
$parsedUrl = parse_url($url);
$domain = $parsedUrl['scheme'] . '://' . $parsedUrl['host'];
// Fetch data from the URL
$response = file_get_contents($url);
if ($response === false) {
    echo 'Error: Unable to fetch data.';
    exit;
}
$previewCards = extractPreviewCardLinks($response);
$html = generateImageTags($previewCards, $domain);
echo 'Domain: ' . $domain . '<br>';
echo 'Preview Card Images:<br>';
echo $html;
function extractPreviewCardLinks($responseText)
{
    //$pattern = '/\/system\/cache\/preview_cards\/images\/\d+\/\d+\/\d+\/original\/[a-f0-9]+\.(?:jpg|jpeg|png|gif)/i';  //normal masstodon
        $pattern = '/\/cache\/preview_cards\/images\/\d{3}\/\d{3}\/\d{3}\/original\/[a-f0-9]+\.(?:jpg|jpeg|png|gif)/i';     //glitchfork suchas urusai.social
         preg_match_all($pattern, $responseText, $matches);


    return $matches[0] ?? [];
}
function generateImageTags($imageUrls, $domain)
{
    $html = '';
    foreach ($imageUrls as $imageUrl) {
        $domain = " https://files.mastodon.social";
        $html .= '<img src="' .$domain . $imageUrl . '" alt="Preview Card Image"><br>';
    }

    return $html;
}
?>

________________________________

Deviantart latest images parse:
-------------------------------------------------

<?php
// Default DeviantArt username
$username = "ryedai1";
// Check if the "dauser" query string parameter is set
if (isset($_GET['dauser'])) {
    // Get the value of "dauser" query string parameter
    $queryUsername = $_GET['dauser'];
    // Validate and assign the new username if it's not empty
    if (!empty($queryUsername)) {
        $username = $queryUsername;
    }
}
// URL of the user's DeviantArt gallery
$url = "https://www.deviantart.com/$username/gallery/";
// Fetch the HTML content of the gallery page
$html = file_get_contents($url);
// Create a DOM document
$dom = new DOMDocument();
libxml_use_internal_errors(true);
// Load the HTML content into the DOM document
$dom->loadHTML($html);
// Create a DOMXPath object
$xpath = new DOMXPath($dom);
// XPath query to select all <a> elements with data-hook attribute set to "deviation_link"
$query = '//a[@data-hook="deviation_link"]';
// Execute the XPath query
$links = $xpath->query($query);
// Array to store unique links
$uniqueLinks = [];
// Loop through the matched links
foreach ($links as $link) {
    $href = $link->getAttribute('href');
    // Check if the link is already in the array
    if (!in_array($href, $uniqueLinks)) {
        // Add the link to the array of unique links
        $uniqueLinks[] = $href;
        // Generate the <a> tag with target="_blank" attribute
        $htmlLink = '<a href="' . $href . '" target="_blank">' . $href . '</a>';
        // Display the generated link
        echo $htmlLink . "<br>";
        // Fetch the HTML content of the individual deviation page
        $deviationHTML = file_get_contents($href);
        // Create a new DOM document for the individual deviation page
        $deviationDOM = new DOMDocument();
        libxml_use_internal_errors(true);
        // Load the HTML content into the DOM document
        $deviationDOM->loadHTML($deviationHTML);
        // Create a new DOMXPath object for the individual deviation page
        $deviationXPath = new DOMXPath($deviationDOM);
        // XPath query to select the <img> tag with src attribute containing "https://images-wixmp"
        $deviationImgQuery = '//img[contains(@src, "https://images-wixmp")]';
        // Execute the XPath query on the individual deviation page
        $deviationImg = $deviationXPath->query($deviationImgQuery)->item(0);
        // Check if the <img> tag is found
        if ($deviationImg) {
            // Get the src attribute value
            $imgSrc = $deviationImg->getAttribute('src');
            // Generate the <img> tag to embed the image
            $htmlImg = '<img src="' . $imgSrc . '">';
            // Display the embedded image
            echo $htmlImg . "<br>";
        }
    }
}
?>


_______________________________________


Show newest file in dir + modify date
------------------------------------------------

<?php
$files = glob('*'); // Get all files in the current directory
$newestFile = null;
$newestTime = 0;
foreach ($files as $file) {
    if (is_file($file)) { // Check if the item is a file
        $fileExtension = pathinfo($file, PATHINFO_EXTENSION);
        $fileName = pathinfo($file, PATHINFO_FILENAME);
        if ($fileExtension === 'zip' || $fileExtension === 'php' || strpos($fileName, 'error_log') !== false) {
            continue;
        }
        $fileTime = filemtime($file); // Get the last modified timestamp of the file
        if ($fileTime > $newestTime) {
            $newestTime = $fileTime;
            $newestFile = $file;
        }
    }
}
if ($newestFile !== null) {
    $lastModified = date("Y-m-d", $newestTime); // Format the last modified timestamp as yyyy-mm-dd
    $link = htmlspecialchars($newestFile); // Sanitize the filename for use in the hyperlink

    echo "<a href='$link' target='_blank'>$link</a> - Last modified: $lastModified";
}
?>

_____________________________

Fetch Steam Library (and allow json dld):
------------------------------------------

<a target="_blank" href="?steam_id=76561198119673186&api_key=apikey">Custom</a> (<a target="_blank" href="https://steamcommunity.com/login/home/?goto=%2Fdev%2Fapikey" style="color:grey">Get ApiKey</a>)
<!DOCTYPE html>
<html>
<head>
  <title>Steam Library Viewer</title>
  <style>
    table {
      border-collapse: collapse;
    }

    table, th, td {
      border: 1px solid #ccc;
      padding: 8px;
    }
  </style>
</head>
<body>
  <table id="steamLibrary">
    <thead>
      <tr>
        <th>Game Name</th>
        <th>Playtime (minutes)</th>
        <th>Purchase Date</th>
        <th>Price (Current)</th>
        <th>Last Played</th>
      </tr>
    </thead>
    <tbody>
<?php
// Replace 'YOUR_API_KEY' with your actual Steam API key
$apiKey = isset($_GET['api_key']) ? $_GET['api_key'] : 'F96D40C8F7FA9C51B204D4707E0A094B';
$steamId = isset($_GET['steam_id']) ? $_GET['steam_id'] : '76561198119673186';

// Construct the API URL to fetch the user's Steam library data
$libraryApiUrl = "https://api.steampowered.com/IPlayerService/GetOwnedGames/v1/?key={$apiKey}&steamid={$steamId}&include_appinfo=1&include_played_free_games=1";

// Fetch the user's Steam library data
$libraryResponse = file_get_contents($libraryApiUrl);
$libraryData = json_decode($libraryResponse, true);

if ($libraryData && isset($libraryData['response']['games'])) {
  $games = $libraryData['response']['games'];

  if (!empty($games)) {
    // Sort the games array alphabetically by game name
    usort($games, function($a, $b) {
      return strcmp($a['name'], $b['name']);
    });

    foreach ($games as $game) {
      $appId = $game['appid'];
      $appName = $game['name'];
      $playtimeMinutes = $game['playtime_forever'];
      $purchaseDate = isset($game['purchase_date']) ? date('Y-m-d', $game['purchase_date']) : 'Unknown';
      $rtimeLastPlayed = isset($game['rtime_last_played']) ? date('Y-m-d', $game['rtime_last_played']) : 'Unknown';

      // Construct the API URL to fetch the purchase information for the game
      $purchaseApiUrl = "https://store.steampowered.com/api/appdetails?appids={$appId}";

      // Fetch the purchase information for the game
      $purchaseResponse = file_get_contents($purchaseApiUrl);
      $purchaseData = json_decode($purchaseResponse, true);

      if ($purchaseData && isset($purchaseData[$appId]['data']['price_overview'])) {
        $priceOverview = $purchaseData[$appId]['data']['price_overview'];
        $price = number_format($priceOverview['final'] / 100, 2) . ' €'; // Convert price to Euros
      } else {
        $price = 'Unknown';
      }

      echo '<tr>';
      echo "<td>{$appName}</td>";
      echo "<td>{$playtimeMinutes}</td>";
      echo "<td>{$purchaseDate}</td>";
      echo "<td>{$price}</td>";
      echo "<td>{$rtimeLastPlayed}</td>";
      echo '</tr>';
    }
  } else {
    echo '<tr><td colspan="5">No games found in the Steam library.</td></tr>';
  }
} else {
  echo '<tr><td colspan="5">Error retrieving Steam library.</td></tr>';
}
?>
    </tbody>
  </table>

  <form action="download.php" method="post">
    <input type="hidden" name="libraryData" value="<?php echo htmlspecialchars(json_encode($libraryData)); ?>">
    <button type="submit">Download as JSON</button>
  </form>
</body>
</html>



====download.php===

<?php
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
  if (isset($_POST['libraryData'])) {
    $libraryData = $_POST['libraryData'];
    // Set the appropriate headers for file download
    header('Content-Type: application/json');
    header('Content-Disposition: attachment; filename="steam_library.json"');
    // Output the library data as a JSON file
    echo $libraryData;
    exit;
  }
}
// Redirect back to the previous page if the library data is not available
header('Location: ' . $_SERVER['HTTP_REFERER']);
?>


__________________________________

Open mastodon url in home instance:
------------------------------------------------

<a href="?search=https://sunny.garden/@Iva852/109293246960188756&pbUrl=https://pb.todon.de&apikey=orfvAYfV1Sy4DtJCYN32J48Mbjh50kFTywcWEWmLHSM">test</a><br>
<?php
// Check if the API key is submitted
if (isset($_POST['apikey'])) {
    $apiKey = $_POST['apikey'];
    $pbUrl = $_POST['pbUrl'];
    $search = $_POST['url'];
    $url = $pbUrl . '/api/v2/search/?q=' . urlencode($search) . '&limit=1&resolve=true';
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $url);
    curl_setopt($ch, CURLOPT_HTTPHEADER, [
        'Authorization: Bearer ' . $apiKey
    ]);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    $response = curl_exec($ch);
    if (curl_errno($ch)) {
        echo 'Error: ' . curl_error($ch);
    }
    curl_close($ch);
    $data = json_decode($response, true);
    if (isset($data['statuses'][0]['id'])) {
        $id = $data['statuses'][0]['id'];
        $urlParts = parse_url($search);
        $pathParts = explode('/', trim($urlParts['path'], '/'));
        $username = $pathParts[0];
        $domain = $urlParts['host'];
        $newUrl = $pbUrl . '/' . $username . '@' . $domain . '/' . $id;
        echo 'New URL: <a id="newUrlLink" href="' . $newUrl . '">' . $newUrl . '</a>';
echo '<script>document.getElementById("newUrlLink").click();</script>';
    } else {
        echo 'Please enter a URL';
    }
}
?>
<!-- HTML form to input the API key, $pbUrl, and URL -->
<form method="POST" action="">
    <label for="apikey">API Key:</label>
    <input type="text" id="apikey" name="apikey" required>
    <br>
    <label for="pbUrl">pbUrl:</label>
    <input type="text" id="pbUrl" name="pbUrl" required>
    <br>
    <label for="url">URL:</label>
    <input type="text" id="url" name="url" pattern="https://.*" required>
    <input type="submit" value="Submit">
</form>
<script>
  window.onload = function () {
    const urlParams = new URLSearchParams(window.location.search);
    const search = urlParams.get("search");
    const pbUrl = urlParams.get("pbUrl");
    const apiKey = urlParams.get("apikey");
    if (search && pbUrl && apiKey) {
      document.getElementById("apikey").value = apiKey;
      document.getElementById("pbUrl").value = pbUrl;
      if (search.includes("http")) {document.getElementById("url").value = search;}
      // Check if query parameter 'submitted' is present
      if (!urlParams.has("submitted")) {
    
